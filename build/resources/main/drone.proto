syntax = "proto3";
package grpc.drone;

message AddRequest {
  int32 id = 1;
  string address =2;
  string port =3;
  int32 coordX = 4;
  int32 coordY = 5;
}

message AddResponse {
  int32 response = 1;
  int32 IDnextDrone = 2;
  int32 IDnextNextDrone = 3;
  bool IDmasterPrevDrone = 4;
  string AddressNextDrone = 5;
  string AddressNextNextDrone = 6;
  string PortNextDrone = 7;
  string PortNextNextDrone = 8;
}

message OrderRequest {
  string id = 1;
  int32 depX = 2;
  int32 depY = 3;
  int32 destX = 4;
  int32 destY = 5;
}
message OrderResponse {
  string arrivalTime = 1;
  int32 newCoordX = 2;
  int32 newCoordY = 3;
  double kmTraveled = 4;
  double airPollution = 5;
  int32 batteryLevel = 6;
  bool isQuitting = 7;
  int32 deliveryCompleted = 8;
}

message PingRequest {
  bool recovery = 1;
}
message PingResponse {
  bool pingAck = 1;
  int32 nextDrone = 2;
}

message ElectionReq {
  string msg = 1;
  int32 droneID = 2;
  int32 batteryLevel = 3;
}
message ElectionAck {
  bool ack = 1;
}

message RechargeRequest {
  int32 droneId = 1;
  string timestamp = 2;
}
message RechargeResponse {
  string response = 1;
}

message RechargePermission {
  string ok = 1;
  int32 droneId = 2;
}
message RechargePermissionAck {
  string ack = 1;
}

service Drone {
  rpc Add(AddRequest) returns (AddResponse);
  rpc SendOrder(OrderRequest) returns (OrderResponse);
  rpc Ping(PingRequest) returns (PingResponse);
  rpc Election(ElectionReq) returns (ElectionAck);
  rpc Recharge(RechargeRequest) returns (RechargeResponse);
  rpc RechargeOK(RechargePermission) returns (RechargePermissionAck);
}